/* eslint-disable @typescript-eslint/indent */

import type {RenderElementProps, RenderLeafProps} from "slate-react"
import type {ReactNode} from "react"

import {nanoid} from "nanoid"

import type {Node} from "../public/Node.js"
import type {Replace} from "../public/Replace.js"

import {TextNode} from "./type/TextNode.js"
import type {Descendant} from "./type/Descendant.js"

/**
 * @api private
 */
interface PropsWithKey {
  key: string
}

/**
 * @api private
 */
interface LeafWithChildren {
  children: string
}

/**
 * @api private
 */
interface ElementWithChildren {
  children: ReactNode
}

/**
 * Better typed base RenderLeafProperties
 *
 * @api private
 */
type LeafNodeBase<T extends TextNode = TextNode> =
  Replace<RenderLeafProps, LeafWithChildren & {
    leaf: T
    text: T
  }>

/**
 * @api private
 */
type ElementNodeBase<T extends Node = Node> =
  Replace<
    RenderElementProps,

    ElementWithChildren
      & {
        element: T
      }

      & {
        attributes: Omit<RenderElementProps["attributes"], "ref">
      }
  >

/**
 * @api private
 */
type NodeBaseProps<T extends Descendant> = T extends Node
  ? ElementNodeBase<T>
  : T extends TextNode
    ? LeafNodeBase<T>
    : never

/**
 * @api private
 */
export type NodeProps<T extends Descendant> = Replace<NodeBaseProps<T>, {
  attributes: Replace<NodeBaseProps<T>["attributes"], PropsWithKey>
}>

/**
 * @api private
 */
export type ElementProps<T extends Node = Node> =
  Replace<ElementNodeBase<T>, {
    attributes: Replace<
      ElementNodeBase["attributes"],

      PropsWithKey
    >
  }>

/**
 * @api private
 */
export type LeafProps<T extends TextNode = TextNode> =
  Replace<LeafNodeBase<T>, LeafWithChildren & {
    attributes: Replace<LeafNodeBase["attributes"], PropsWithKey>
  }>

export interface CreateNodePropsOptions {
  /**
   * The name of the id property on nodes.
   *
   * Defaults to "id"
   */
  idKeyName?: string

  /**
   * If `true`, the id for key attribute will be always generated by `slate-to-react`.
   *
   * Defaults to `false`
   */
  forceGenerateId?: boolean
}

const defaults: Required<CreateNodePropsOptions> = {
  idKeyName: "id",
  forceGenerateId: false
}

/**
 * Generated an ID for node's attributes
 *
 * @param node A node to borrow an existent id from
 * @param key A node's id field key name
 * @param force If `true`, the id for key attribute will be always generated
 */
function generateId<TNode extends {[key: string]: any}>(
  node: TNode,
  key: string,
  force: boolean
): string {
  const id: string | undefined = node[key]

  if (id && !force) {
    return id
  }

  return nanoid()
}

/**
 * Creates render props for `Leaf` element
 *
 * @param node Leaf node to create render props for
 */
export const createLeafProps = <T extends TextNode = TextNode>(
  node: T,
  options: CreateNodePropsOptions = {}
): LeafProps<T> => {
  const {forceGenerateId, idKeyName} = {...defaults, ...options}

  return {
    leaf: node,
    text: node,
    children: node.text,
    attributes: {
      key: generateId(node, idKeyName, forceGenerateId),
      "data-slate-leaf": true
    }
  }
}

/**
 * Creates render props for `Element` node
 *
 * @param node Element node to create rener props for
 * @param children Descendant ReactElement for this node
 * @param options Additional options
 */
export function createElementProps<T extends Node = Node>(
  node: T,
  children: ReactNode,
  options: CreateNodePropsOptions = {}
): ElementProps<T> {
  const {forceGenerateId, idKeyName} = {...defaults, ...options}

  return {
    children,
    element: node,
    attributes: {
      key: generateId(node, idKeyName, forceGenerateId),
      "data-slate-node": "element",
    }
  }
}
